#!/bin/bash

set -e

readonly CA_PATH="/etc/openvpn-ca"
readonly OPENVPN_PATH="/etc/openvpn"
readonly BASH_COMMONS_DIR="/opt/gruntwork/bash-commons"

if [[ ! -d "$BASH_COMMONS_DIR" ]]; then
  echo "ERROR: this script requires that bash-commons is installed in $BASH_COMMONS_DIR. See https://github.com/gruntwork-io/bash-commons for more info."
  exit 1
fi

source "$BASH_COMMONS_DIR/log.sh"
source "$BASH_COMMONS_DIR/assert.sh"
source "$BASH_COMMONS_DIR/os.sh"
source "$BASH_COMMONS_DIR/file.sh"

function print_usage {
    echo
    echo "Usage: backup-openvpn-pki [OPTIONS]"
    echo
    echo "Backup PKI to S3."
    echo
    echo "Options:"
    echo
    echo -e "  --s3-bucket-name\t\t\tThe name of the S3 bucket that will be created to backup PKI assets."
    echo -e "  --kms-key-id\t\t\tThe id of the KMS key that will be used to encrypt S3 assets."
    echo
    echo "Example:"
    echo
    echo "  backup-pki \\"
    echo "    --s3-bucket-name \"gruntwork-openvpn\" \\"
    echo "    --kms-key-id \"01533cb9-b46b-4380-b63e-54edf025d5d1\" "
}

# Once all of the PKI assets have been generated, upload them to s3 for backup purposes
function backup_pki_assets_to_s3 {
    local -r bucket_name="$1"
    local -r kms_key_id=$2

    log_info "Backing up new PKI assets to S3..."
    aws s3 cp $OPENVPN_PATH s3://$bucket_name/server/ --recursive --sse "aws:kms" --sse-kms-key-id "$kms_key_id"
    aws s3 cp $CA_PATH/vars.local s3://$bucket_name/server/vars.local --sse "aws:kms" --sse-kms-key-id "$kms_key_id"
}


function backup_pki {
    local bucket_name=""
    local kms_key_id=""

    while [[ $# -gt 0 ]]; do
        local key="$1"

        case "$key" in
            --s3-bucket-name)
                bucket_name=$2
                shift
                ;;
            --kms-key-id)
                kms_key_id=$2
                shift
                ;;
            --help)
                print_usage
                exit
                ;;
            *)
                log_error "Unrecognized argument: $key"
                print_usage
                exit 1
                ;;
        esac

        shift
    done

    assert_not_empty "--s3-bucket-name" "$bucket_name"
    assert_not_empty "--kms-key-id" "$kms_key_id"

    #Pre-Reqs
    assert_uid_is_root_or_sudo
    assert_is_installed aws

    backup_pki_assets_to_s3 "$bucket_name" "$kms_key_id"

    log_info "Success!"
}

backup_pki "$@"

#!/usr/bin/env bash

set -e

readonly CA_PATH="/etc/openvpn-ca"
readonly OPENVPN_PATH="/etc/openvpn"
readonly DEFAULT_KEY_SIZE=4096
readonly DEFAULT_CA_EXPIRATION_DAYS=3650
readonly DEFAULT_CERT_EXPIRATION_DAYS=3650
readonly DEFAULT_CRL_EXPIRATION_DAYS=3650
readonly BASH_COMMONS_DIR="/opt/gruntwork/bash-commons"

if [[ ! -d "$BASH_COMMONS_DIR" ]]; then
  echo "ERROR: this script requires that bash-commons is installed in $BASH_COMMONS_DIR. See https://github.com/gruntwork-io/bash-commons for more info."
  exit 1
fi

source "$BASH_COMMONS_DIR/log.sh"
source "$BASH_COMMONS_DIR/assert.sh"
source "$BASH_COMMONS_DIR/os.sh"
source "$BASH_COMMONS_DIR/file.sh"

function print_usage() {
	echo
	echo "Usage: init-openvpn [OPTIONS]"
	echo
	echo "Configure OpenVPN, Generate the PKI and backup to S3."
	echo
	echo "Options:"
	echo
	echo -e "  --locality\t\t\tThe locality name (e.g. city or town name) where your organization is located. Required."
	echo -e "  --state\t\t\tThe state or province name where your organization is located. Use the full, unabbreviated name. Required."
	echo -e "  --country\t\t\tThe two-letter country name where your organization is located (see https://www.digicert.com/ssl-certificate-country-codes.htm). Required."
	echo -e "  --org\t\t\t\tThe name of your organization (e.g. Gruntwork). Required."
	echo -e "  --org-unit\t\t\tThe name of the unit, department, or scope within your organization for which this CA certificate will be used. Required."
	echo -e "  --email\t\t\tThe e-mail address of the administrator."
	echo -e "  --s3-bucket-name\t\t\tThe name of the S3 bucket that will be created to backup PKI assets."
	echo -e "  --kms-key-id\t\t\tThe id of the KMS key that will be used to encrypt S3 assets."
	echo -e "  --key-size\t\t\tThe size of the DH keys (in bits). Defaults to 4096."
	echo -e "  --ca-expiration-days\t\t\tThe number of days the CA root certificate will be valid for. Defaults to 3650 (10 years)"
	echo -e "  --cert-expiration-days\t\t\tThe number of days the server and user certificates will be valid for. Defaults to 3650 (10 years)."
	echo -e "  --crl-expiration-days\t\t\tThe number of days the certificate revocation list will be valid for. Defaults to 3650 (10 years)."
	echo -e "  --vpn-subnet\t\t\tThe subnet the vpn clients will be assigned addresses from. Required. For example, 10.10.10.0 255.255.255.0"
	echo -e "  --vpn-route\t\t\tAdditional routes that will be pushed to the VPN clients and routed over the VPN. Can be specified multiple times. Required. For example, 10.200.0.0 255.255.255.0"
	echo -e "  --search-domain\t\t\tPush a DNS search domain to clients (e.g., my.domain.internal). Optional. May be specified multiple times."
	echo
	echo "Example:"
	echo
	echo "  init-openvpn.sh \\"
	echo "    --locality \"Phoenix\" \\"
	echo "    --state \"Arizona\" \\"
	echo "    --country \"US\" \\"
	echo "    --org \"Gruntwork\" \\"
	echo "    --org-unit \"OpenVPN\" \\"
	echo "    --email \"support@gruntwork.io\" \\"
	echo "    --s3-bucket-name \"gruntwork-openvpn\" \\"
	echo "    --kms-key-id \"01533cb9-b46b-4380-b63e-54edf025d5d1\" \\"
	echo "    --vpn-subnet \"10.1.14.0 255.255.255.0\" \\"
	echo "    --vpn-route \"10.200.0.0 255.255.0.0\" "
}

# Assert that the given string is of the given length
function assert_string_length() {
	local -r string_name="$1"
	local -r string_value="$2"
	local -r string_length_desired="$3"

	string_length_actual="${#string_value}"
	if [[ $string_length_actual != $string_length_desired ]]; then
		log_error "The string value for \"$string_name\" must be of length $string_length_desired, but \"$string_value\" is of length $string_length_actual."
		exit 1
	fi
}

function prep_config_dir() {
	cd $CA_PATH
	source ./vars.local
	./clean-all
}

function restore_vars_local_from_s3() {
	aws s3 cp s3://$1/server/vars.local $CA_PATH --sse "aws:kms" --sse-kms-key-id "$2"
}

# Restore the previously generated PKI assets from s3 so previously issued certificates continue to work
function restore_pki_assets_from_s3() {
	echo "Restore PKI assets from S3..."
	aws s3 cp s3://$1/server/ $OPENVPN_PATH --recursive --exclude "*" --include "*.crt" --sse "aws:kms" --sse-kms-key-id "$2"
	aws s3 cp s3://$1/server/ $OPENVPN_PATH --recursive --exclude "*" --include "*.key" --sse "aws:kms" --sse-kms-key-id "$2"
	aws s3 cp s3://$1/server/ $OPENVPN_PATH --recursive --exclude "*" --include "*.pem" --sse "aws:kms" --sse-kms-key-id "$2"
	aws s3 cp s3://$1/server/ $OPENVPN_PATH --recursive --exclude "*" --include "*.csr" --sse "aws:kms" --sse-kms-key-id "$2"
	aws s3 cp s3://$1/server/serial $OPENVPN_PATH --sse "aws:kms" --sse-kms-key-id "$2"
	aws s3 cp s3://$1/server/serial.old $OPENVPN_PATH --sse "aws:kms" --sse-kms-key-id "$2"
	aws s3 cp s3://$1/server/index.txt $OPENVPN_PATH --sse "aws:kms" --sse-kms-key-id "$2"
	aws s3 cp s3://$1/server/index.txt.old $OPENVPN_PATH --sse "aws:kms" --sse-kms-key-id "$2"
	aws s3 cp s3://$1/server/index.txt.attr $OPENVPN_PATH --sse "aws:kms" --sse-kms-key-id "$2"
}

function copy_config_templates() {
	echo "Copying OpenVPN config templates into place..."
	cp /gruntwork/install-openvpn/openvpn-client.ovpn $OPENVPN_PATH/
}

function generate_server_conf() {
	local vpnSubnet="$1"
	local routes="$2"
	local keySize="$3"
	local searchDomains="$4"
	local dnsServer
	dnsServer=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}')

	cat <<EOF >$OPENVPN_PATH/server.conf
##
## This is a configuration file for the OpenVPN Server.
##
##

port 1194
proto udp
dev tun
ca ca.crt
cert server.crt
key server.key  # This file should be kept secret
dh dh$keySize.pem
topology subnet
crl-verify /etc/openvpn/crl.pem
persist-key
persist-tun
server $vpnSubnet
ifconfig-pool-persist ipp.txt

# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.
push "dhcp-option DNS $dnsServer"
$searchDomains

keepalive 10 120
cipher AES-256-CBC
auth SHA256
user  nobody
group nogroup
$routes

verb 4
daemon
mute 20

EOF
}

#Takes a subnet mask (255.255.255.0) and returns network portion bit length (24)
function mask2CIDR() {
	local nbits=0
	local IFS=.
	for dec in $1; do
		case $dec in
		255) let nbits+=8 ;;
		254) let nbits+=7 ;;
		252) let nbits+=6 ;;
		248) let nbits+=5 ;;
		240) let nbits+=4 ;;
		224) let nbits+=3 ;;
		192) let nbits+=2 ;;
		128) let nbits+=1 ;;
		0) ;;
		*)
			log_error "$dec is not a valid netmask"
			exit 1
			;;
		esac
	done
	echo "$nbits"
}

#Takes network portion bit length (24) and returns subnet mask (255.255.255.0)
function cidr2mask() {
	local i mask=""
	local full_octets=$(($1 / 8))
	local partial_octet=$(($1 % 8))

	for ((i = 0; i < 4; i += 1)); do
		if [ $i -lt $full_octets ]; then
			mask+=255
		elif [ $i -eq $full_octets ]; then
			mask+=$((256 - 2 ** (8 - $partial_octet)))
		else
			mask+=0
		fi
		test $i -lt 3 && mask+=.
	done

	echo $mask
}

function extractMask() {
	local ipArray=($1)
	local mask=${ipArray[1]}
	echo $mask
}

function extractSubnet() {
	local ipArray=($1)
	local subnet=${ipArray[0]}
	echo $subnet
}

function configure_tcpip() {
	local subnet
	local mask
	local cidr
  subnet=$(extractSubnet "$1")
	mask=$(extractMask "$1")
	cidr=$(mask2CIDR $mask)
	local -r subnet_cidr="$subnet/$cidr"

	log_info "Configure TCP/IP settings..."

	cp /gruntwork/install-openvpn/ufw-default /etc/default/ufw
  
	cp /gruntwork/install-openvpn/before.rules /etc/ufw/before.rules
	file_replace_text "__VPN_SUBNET__" "$subnet_cidr" /etc/ufw/before.rules

	# Enable TCP forwarding
	sysctl -w net.ipv4.ip_forward=1
	echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf

	#Add Firewall Rules
	ufw allow 1194/udp
	ufw allow OpenSSH
	iptables-save

	ufw disable
	ufw --force enable
}

function is_pki_bootstrapped() {
	local count
	count=$(aws s3 ls $1/server/ca.key | wc -l)
	[[ "$count" -gt 0 ]]
}

function generate_easy_rsa_variables_file() {
	local -r country="$1"
	local -r state="$2"
	local -r locality="$3"
	local -r org="$4"
	local -r email="$5"
	local -r org_unit="$6"
	local -r key_name="$7"
	local -r key_size="$8"
	local -r ca_expiration_days="$9"
	local -r cert_expiration_days="${10}"
	local -r vars_file="$CA_PATH/vars.local"

	log_info "Generating EASY_RSA variables file..."
	[[ -d "$CA_PATH" ]] || make-cadir $CA_PATH

	cp /gruntwork/install-openvpn/vars.local "$vars_file"

	file_replace_text "__KEY_COUNTRY__"  "$country" "$vars_file"
	file_replace_text "__KEY_PROVINCE__" "$state" "$vars_file"
	file_replace_text "__KEY_CITY__" "$locality" "$vars_file"
	file_replace_text "__KEY_ORG__" "$org" "$vars_file"
	file_replace_text "__KEY_EMAIL__" "$email" "$vars_file"
	file_replace_text "__KEY_OU__" "$org_unit" "$vars_file"
	file_replace_text "__KEY_NAME__" "$key_name" "$vars_file"
	file_replace_text "__KEY_SIZE__" "$key_size" "$vars_file"
	file_replace_text "__CA_EXPIRE__" "$ca_expiration_days" "$vars_file"
	file_replace_text "__KEY_EXPIRE__" "$cert_expiration_days" "$vars_file"
}

function update_default_crl_days() {
	local -r crl_expiration_days="$1"

	log_info "Updating default_crl_days to $crl_expiration_days in $CA_PATH/openssl-1.0.0.cnf"
	file_replace_text "default_crl_days=.*" "default_crl_days= $crl_expiration_days" "$CA_PATH/openssl-1.0.0.cnf"
	generate_and_revoke_dummy_certificate
}

#generate and revoke a dummy certificate to init certificate revocation list (crl)
function generate_and_revoke_dummy_certificate() {
	cd $CA_PATH
	./build-key --batch dummy
	./revoke-full dummy || true
}

function generate_pki() {
	log_info "Generating new PKI assets [this will take a long time]..."
	#Build the CA
	./build-ca --batch

	#Generate and sign the server certificate
	./build-key-server --batch server

	#Build strong Diffie-Hellman params for use during key exchange. This takes a LONG time (10+ minutes)
	./build-dh

	#generate an HMAC signature to strengthen the server's TLS integrity verification capabilities
	openvpn --genkey --secret $OPENVPN_PATH/ta.key

	generate_and_revoke_dummy_certificate
}

function change_config_dir_permissions() {
	log_info "Setting $OPENVPN_PATH owenership and permissions..."
	chown -R nobody:nogroup $OPENVPN_PATH
	chmod -R 770 $OPENVPN_PATH
}

function add_backup_pki_cron_job() {
	local -r bucket_name="$1"
	local -r kms_key_id="$2"
	local -r cron_file="/etc/cron.hourly/backup-openvpn-pki"

	cat <<EOF > "$cron_file"
#!/bin/bash
##
## This is for backing up the OpenVPN Server PKI.
##
PATH="$PATH" backup-openvpn-pki --s3-bucket-name "$bucket_name" --kms-key-id "$kms_key_id"

EOF
	chmod +x "$cron_file"
}

function start_openvpn() {
	log_info "Starting OpenVPN..."
	systemctl enable supervisor
	systemctl restart supervisor
	systemctl enable openvpn@server
	systemctl restart openvpn@server
}

function init_openvpn() {
	local key_size="$DEFAULT_KEY_SIZE"
	local ca_expiration_days="$DEFAULT_CA_EXPIRATION_DAYS"
	local cert_expiration_days="$DEFAULT_CERT_EXPIRATION_DAYS"
	local crl_expiration_days="$DEFAULT_CRL_EXPIRATION_DAYS"

	local locality=""
	local state=""
	local country=""
	local org=""
	local org_unit=""
	local email=""
	local access_key=""
	local access_secret=""
	local bucket_name=""
	local kms_key_id=""
	local region=""
	local vpn_subnet=""
	local search_domains=()
	local routes=()

	while [[ $# -gt 0 ]]; do
		local key="$1"

		case "$key" in
		--locality)
			locality="$2"
			shift
			;;
		--state)
			state="$2"
			shift
			;;
		--country)
			country="$2"
			shift
			;;
		--org)
			org="$2"
			shift
			;;
		--org-unit)
			org_unit="$2"
			shift
			;;
		--email)
			email="$2"
			shift
			;;
		--s3-bucket-name)
			bucket_name=$2
			shift
			;;
		--kms-key-id)
			kms_key_id=$2
			shift
			;;
		--key-size)
			key_size=$2
			shift
			;;
		--ca-expiration-days)
			ca_expiration_days=$2
			shift
			;;
		--cert-expiration-days)
			cert_expiration_days=$2
			shift
			;;
		--crl-expiration-days)
			crl_expiration_days=$2
			shift
			;;
		--vpn-subnet)
			vpn_subnet=$2
			shift
			;;
		--search-domain)
			search_domains+=("$2")
			shift
			;;
		--vpn-route)
			routes=("${routes[@]}" "$2")
			shift
			;;
		--help)
			print_usage
			exit
			;;
		*)
			log_error "Unrecognized argument: $key"
			print_usage
			exit 1
			;;
		esac

		shift
	done

	assert_not_empty "--locality" "$locality"
	assert_not_empty "--state" "$state"
	assert_not_empty "--country" "$country"
	assert_string_length "--country" "$country" 2
	assert_not_empty "--org" "$org"
	assert_not_empty "--org-unit" "$org_unit"
	assert_not_empty "--email" "$email"
	assert_not_empty "--s3-bucket-name" "$bucket_name"
	assert_not_empty "--kms-key-id" "$kms_key_id"
	assert_not_empty " --key-size" "$key_size"
	assert_not_empty "--ca-expiration-days" "$ca_expiration_days"
	assert_not_empty "--cert-expiration-days" "$cert_expiration_days"
	assert_not_empty "--crl-expiration-days" "$crl_expiration_days"
	assert_not_empty "--vpn-route" "$routes"
	assert_not_empty "--vpn-subnet" "$vpn_subnet"

	#Pre-Reqs
	assert_uid_is_root_or_sudo
	assert_is_installed aws
	assert_is_installed openssl
	assert_is_installed backup-openvpn-pki

	if $(is_pki_bootstrapped "$bucket_name"); then
		restore_vars_local_from_s3 "$bucket_name" "$kms_key_id"
		prep_config_dir
		restore_pki_assets_from_s3 "$bucket_name" "$kms_key_id"
	else
		generate_easy_rsa_variables_file "$country" "$state" "$locality" "$org" "$email" "$org_unit" "server" "$key_size" "$ca_expiration_days" "$cert_expiration_days"
		prep_config_dir
		generate_pki
		backup-openvpn-pki --s3-bucket-name "$bucket_name" --kms-key-id "$kms_key_id"
	fi

	update_default_crl_days "$crl_expiration_days"

	local searchDomainsStr=""
	for j in "${search_domains[@]}"; do
		searchDomainsStr=$(printf "$searchDomainsStr\npush \"dhcp-option DOMAIN $j\"")
	done

	local routesStr=""
	for i in "${routes[@]}"; do
		routesStr=$(printf "$routesStr\npush \"route $i\"")
	done

	copy_config_templates
	generate_server_conf "$vpn_subnet" "$routesStr" "$key_size" "$searchDomainsStr"
	change_config_dir_permissions
	configure_tcpip "$vpn_subnet"
	start_openvpn
	add_backup_pki_cron_job "$bucket_name" "$kms_key_id"

	log_info "Success!"
}

init_openvpn "$@"
